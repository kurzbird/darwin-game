{"ast":null,"code":"var _jsxFileName = \"/Users/jeffereylam/repos/darwin-game/src/components/Game.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport traits from \"../data/traits.json\";\nimport survivalChance from \"../data/survivalChance.json\";\nimport MutationDisplay from \"./MutationDisplay\"; // function Game() {\n//     const [page, setPage] = useState(0);\n//     const [gameData, setGameData] = useState({\n//         yearsLeft: 1000000,\n//         populationCount: 6,\n//     });\n//     const Page = [\n//         Logo,\n//         InitialMutation,\n//         SurvivalSimulation,\n//     ][currentPosition];\n//     return <div><Page goToNext={() => setPage(page + 1)} /></div>;\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Traits {\n  constructor(legs, size, neck, hair, camo) {\n    this.legs = legs;\n    this.size = size;\n    this.neck = neck;\n    this.hair = hair;\n    this.camo = camo;\n  }\n\n}\n\n; // for populating screen with creatures\n// {population.map((creature, index) => <p key={index}>creature</p>)}\n\nconst Game = () => {\n  _s();\n\n  const [popCount, setPopCount] = useState(3);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Current Population: \", popCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: firstRound,\n      children: \"First Round\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: reproductionRound,\n      children: \"Reproduction Round\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: survivalRound,\n      children: \"Survival Round\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MutationDisplay, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Game, \"aCcdh3HLNiqajCToO5k8g47tjTc=\");\n\n_c = Game;\n\nfunction createRandomOffspring() {\n  return new Traits(randomElement(traits.LEGS), randomElement(traits.SIZE), randomElement(traits.NECK), randomElement(traits.HAIR), randomElement(traits.CAMO));\n}\n\n;\n\nfunction randomElement(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\n; // TO-DO: change this to user selection from MutationDisplay + double it\n\nlet population = [createRandomOffspring(), createRandomOffspring(), createRandomOffspring()]; // Ensures larger starting population before catastrophes\n\nfunction firstRound() {\n  for (let i = 0; i < 5; i++) {\n    reproductionRound();\n  }\n\n  survivalRound();\n  console.log(population.length);\n  return population;\n}\n\nfunction reproductionRound() {\n  const reproductionRate = population.length / 2;\n\n  for (let i = 1; i <= reproductionRate; i++) {\n    population.push(singleOffspring(randomElement(population), randomElement(population)));\n  }\n\n  return population;\n} // defaults to lower index instead of 50/50\n\n\nfunction singleOffspring(animal_1, animal_2) {\n  return new Traits(traits.LEGS[Math.floor((traits.LEGS.indexOf(animal_1.legs) + traits.LEGS.indexOf(animal_2.legs)) / 2)], traits.SIZE[Math.floor((traits.SIZE.indexOf(animal_1.size) + traits.SIZE.indexOf(animal_2.size)) / 2)], traits.NECK[Math.floor((traits.NECK.indexOf(animal_1.neck) + traits.NECK.indexOf(animal_2.neck)) / 2)], traits.HAIR[Math.floor((traits.HAIR.indexOf(animal_1.hair) + traits.HAIR.indexOf(animal_2.hair)) / 2)], traits.CAMO[Math.floor((traits.CAMO.indexOf(animal_1.camo) + traits.CAMO.indexOf(animal_2.camo)) / 2)]);\n} // should return population with changes\n// references surivival test\n\n\nfunction survivalRound() {\n  const CATASTROPHES = [\"COLD\", \"HOT\", \"PREDATORS\", \"TALL_PLANTS\", \"VIRUS\", \"VOLCANO\"];\n  const catastrophe = randomElement(CATASTROPHES);\n\n  for (let i = 0; i < population.length; i++) {\n    if (survivalTest(population[i], survivalChance[catastrophe]) === false) {\n      population.splice(i, 1);\n    }\n  }\n\n  return population;\n} // bool on whether or not animal lives\n// references survival chance\n\n\nfunction survivalTest(animal, catastropheEvent) {\n  let chance = 0;\n\n  for (const trait in animal) {\n    if (catastropheEvent.hasOwnProperty(trait)) {\n      chance += catastropheEvent[trait][animal[trait]];\n    }\n  } // random integer between 1 to 100\n\n\n  const rndInteger = Math.floor(Math.random() * 100) + 1;\n\n  if (chance >= rndInteger) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","traits","survivalChance","MutationDisplay","Traits","constructor","legs","size","neck","hair","camo","Game","popCount","setPopCount","useState","firstRound","reproductionRound","survivalRound","createRandomOffspring","randomElement","LEGS","SIZE","NECK","HAIR","CAMO","array","Math","floor","random","length","population","i","console","log","reproductionRate","push","singleOffspring","animal_1","animal_2","indexOf","CATASTROPHES","catastrophe","survivalTest","splice","animal","catastropheEvent","chance","trait","hasOwnProperty","rndInteger"],"sources":["/Users/jeffereylam/repos/darwin-game/src/components/Game.js"],"sourcesContent":["import React from \"react\";\nimport traits from \"../data/traits.json\";\nimport survivalChance from \"../data/survivalChance.json\";\nimport MutationDisplay from \"./MutationDisplay\";\n\n// function Game() {\n//     const [page, setPage] = useState(0);\n//     const [gameData, setGameData] = useState({\n//         yearsLeft: 1000000,\n//         populationCount: 6,\n//     });\n\n//     const Page = [\n//         Logo,\n//         InitialMutation,\n//         SurvivalSimulation,\n//     ][currentPosition];\n\n//     return <div><Page goToNext={() => setPage(page + 1)} /></div>;\n// }\nclass Traits {\n    constructor(legs, size, neck, hair, camo) {\n        this.legs = legs;\n        this.size = size;\n        this.neck = neck;\n        this.hair = hair;\n        this.camo = camo;\n    }\n};\n\n// for populating screen with creatures\n// {population.map((creature, index) => <p key={index}>creature</p>)}\n\nconst Game = () => {\n    const [popCount, setPopCount] = useState(3);\n\n\n    return (\n        <section>\n            <h1>Current Population: {popCount}</h1>\n            <button onClick={firstRound}>First Round</button>\n            <button onClick={reproductionRound}>Reproduction Round</button>\n            <button onClick={survivalRound}>Survival Round</button>\n            <MutationDisplay></MutationDisplay>\n        </section>\n    )\n}\n\nfunction createRandomOffspring() {\n    return new Traits(\n        randomElement(traits.LEGS),\n        randomElement(traits.SIZE),\n        randomElement(traits.NECK),\n        randomElement(traits.HAIR),\n        randomElement(traits.CAMO)\n    );\n};\n\nfunction randomElement(array) {\n    return array[Math.floor(Math.random() * array.length)];\n};\n\n// TO-DO: change this to user selection from MutationDisplay + double it\nlet population = [createRandomOffspring(), createRandomOffspring(), createRandomOffspring()];\n\n// Ensures larger starting population before catastrophes\nfunction firstRound() {\n    for (let i = 0; i < 5; i++) {\n        reproductionRound();\n    }\n    survivalRound();\n    console.log(population.length);\n\n    return population;\n}\n\nfunction reproductionRound() {\n    const reproductionRate = population.length / 2;\n    for (let i = 1; i <= reproductionRate; i++) {\n        population.push(singleOffspring(randomElement(population), randomElement(population)));\n    }\n    return population;\n}\n\n// defaults to lower index instead of 50/50\nfunction singleOffspring(animal_1, animal_2) {\n    return new Traits(\n        traits.LEGS[Math.floor((traits.LEGS.indexOf(animal_1.legs) + traits.LEGS.indexOf(animal_2.legs)) / 2)],\n        traits.SIZE[Math.floor((traits.SIZE.indexOf(animal_1.size) + traits.SIZE.indexOf(animal_2.size)) / 2)],\n        traits.NECK[Math.floor((traits.NECK.indexOf(animal_1.neck) + traits.NECK.indexOf(animal_2.neck)) / 2)],\n        traits.HAIR[Math.floor((traits.HAIR.indexOf(animal_1.hair) + traits.HAIR.indexOf(animal_2.hair)) / 2)],\n        traits.CAMO[Math.floor((traits.CAMO.indexOf(animal_1.camo) + traits.CAMO.indexOf(animal_2.camo)) / 2)]\n    );\n}\n// should return population with changes\n// references surivival test\nfunction survivalRound() {\n    const CATASTROPHES = [\"COLD\", \"HOT\", \"PREDATORS\", \"TALL_PLANTS\", \"VIRUS\", \"VOLCANO\"]\n    const catastrophe = randomElement(CATASTROPHES);\n    for (let i = 0; i < population.length; i++) {\n        if (survivalTest(population[i], survivalChance[catastrophe]) === false) {\n            population.splice(i, 1);\n        }\n    }\n\n    return population\n}\n\n// bool on whether or not animal lives\n// references survival chance\nfunction survivalTest(animal, catastropheEvent) {\n    let chance = 0;\n\n    for (const trait in animal) {\n        if (catastropheEvent.hasOwnProperty(trait)) {\n            chance += catastropheEvent[trait][animal[trait]];\n        }\n    }\n\n    // random integer between 1 to 100\n    const rndInteger = Math.floor(Math.random() * 100) + 1;\n    if (chance >= rndInteger) {\n        return true\n    }\n    else {\n        return false\n    }\n}\n\nexport default Game;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}