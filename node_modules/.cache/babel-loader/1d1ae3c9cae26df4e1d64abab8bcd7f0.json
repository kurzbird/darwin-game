{"ast":null,"code":"var _jsxFileName = \"/Users/jeffereylam/repos/darwin-game/src/components/Game.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState } from \"react\";\nimport traits from \"../data/traits.json\";\nimport survivalChance from \"../data/survivalChance.json\";\nimport MutationDisplay from \"./MutationDisplay\"; // function Game() {\n//     const [page, setPage] = useState(0);\n//     const [gameData, setGameData] = useState({\n//         yearsLeft: 1000000,\n//         populationCount: 6,\n//     });\n//     const Page = [\n//         Logo,\n//         InitialMutation,\n//         SurvivalSimulation,\n//     ][currentPosition];\n//     return <div><Page goToNext={() => setPage(page + 1)} /></div>;\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Traits {\n  constructor(legs, size, neck, hair, camo) {\n    this.legs = legs;\n    this.size = size;\n    this.neck = neck;\n    this.hair = hair;\n    this.camo = camo;\n  }\n\n}\n\n; // for populating screen with creatures\n// {population.map((creature, index) => <p key={index}>creature</p>)}\n// TO-DO: change this to user selection from MutationDisplay + double it\n\nlet population = [createRandomOffspring(), createRandomOffspring(), createRandomOffspring()];\nconst randomMutations = [createRandomOffspring(), createRandomOffspring(), createRandomOffspring(), createRandomOffspring(), createRandomOffspring(), createRandomOffspring(), createRandomOffspring(), createRandomOffspring(), createRandomOffspring()];\n\nfunction createRandomOffspring() {\n  return new Traits(randomElement(traits.LEGS), randomElement(traits.SIZE), randomElement(traits.NECK), randomElement(traits.HAIR), randomElement(traits.CAMO));\n}\n\n;\n\nfunction randomElement(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\n;\n\nconst Game = () => {\n  _s();\n\n  const [popCount, setPopCount] = useState(3);\n  const [currentRound, setCurrentRound] = useState(1);\n  const [lifelines, setLifelines] = useState(2);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const openDisplay = () => {\n    if (isOpen === false) {\n      setIsOpen(true);\n    } else {\n      setIsOpen(false);\n    }\n  };\n\n  const playGame = () => {\n    if (currentRound === 1) {\n      firstRound();\n      setCurrentRound(2);\n    }\n\n    if (currentRound === 2) {\n      reproductionRound();\n      survivalRound();\n      setCurrentRound(3);\n    }\n\n    if (currentRound === 3) {\n      reproductionRound();\n      survivalRound();\n      setCurrentRound(4);\n    }\n\n    if (currentRound === 4) {\n      reproductionRound();\n      survivalRound();\n      console.log(\"you win!\");\n    }\n  }; // Ensures larger starting population before catastrophes\n\n\n  function firstRound() {\n    for (let i = 0; i < 5; i++) {\n      reproductionRound();\n    }\n\n    survivalRound();\n    setPopCount(population.length);\n    console.log(population);\n    return population;\n  }\n\n  function reproductionRound() {\n    const reproductionRate = population.length / 2;\n\n    for (let i = 1; i <= reproductionRate; i++) {\n      population.push(singleOffspring(randomElement(population), randomElement(population)));\n    }\n\n    setPopCount(population.length);\n    console.log(population);\n    return population;\n  } // defaults to lower index instead of 50/50\n\n\n  function singleOffspring(animal_1, animal_2) {\n    return new Traits(traits.LEGS[Math.floor((traits.LEGS.indexOf(animal_1.legs) + traits.LEGS.indexOf(animal_2.legs)) / 2)], traits.SIZE[Math.floor((traits.SIZE.indexOf(animal_1.size) + traits.SIZE.indexOf(animal_2.size)) / 2)], traits.NECK[Math.floor((traits.NECK.indexOf(animal_1.neck) + traits.NECK.indexOf(animal_2.neck)) / 2)], traits.HAIR[Math.floor((traits.HAIR.indexOf(animal_1.hair) + traits.HAIR.indexOf(animal_2.hair)) / 2)], traits.CAMO[Math.floor((traits.CAMO.indexOf(animal_1.camo) + traits.CAMO.indexOf(animal_2.camo)) / 2)]);\n  } // should return population with changes\n  // references surivival test\n\n\n  function survivalRound() {\n    const CATASTROPHES = [\"COLD\", \"HOT\", \"PREDATORS\", \"TALL_PLANTS\", \"VIRUS\", \"VOLCANO\"];\n    const catastrophe = randomElement(CATASTROPHES);\n    console.log(catastrophe);\n\n    for (let i = 0; i < population.length; i++) {\n      if (survivalTest(population[i], survivalChance[catastrophe]) === false) {\n        population.splice(i, 1);\n      }\n    }\n\n    setPopCount(population.length);\n    return population;\n  } // bool on whether or not animal lives\n  // references survival chance\n\n\n  function survivalTest(animal, catastropheEvent) {\n    let chance = 0;\n\n    for (const trait in animal) {\n      if (catastropheEvent.hasOwnProperty(trait)) {\n        chance += catastropheEvent[trait][animal[trait]];\n      }\n    } // random integer between 1 to 100\n\n\n    const rndInteger = Math.floor(Math.random() * 100) + 1;\n\n    if (chance >= rndInteger) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Who Wants to Live a Million Years?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Current Population: \", popCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: firstRound,\n      children: \"First Round\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: reproductionRound,\n      children: \"Reproduction Round\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: survivalRound,\n      children: \"Survival Round\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: playGame,\n      children: \"Play Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: openDisplay && /*#__PURE__*/_jsxDEV(MutationDisplay, {\n        genePool: randomMutations\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 33\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Game, \"2Aa2i4b56Ctl2VtGQaRhe6/Dt6Q=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","traits","survivalChance","MutationDisplay","Traits","constructor","legs","size","neck","hair","camo","population","createRandomOffspring","randomMutations","randomElement","LEGS","SIZE","NECK","HAIR","CAMO","array","Math","floor","random","length","Game","popCount","setPopCount","currentRound","setCurrentRound","lifelines","setLifelines","isOpen","setIsOpen","openDisplay","playGame","firstRound","reproductionRound","survivalRound","console","log","i","reproductionRate","push","singleOffspring","animal_1","animal_2","indexOf","CATASTROPHES","catastrophe","survivalTest","splice","animal","catastropheEvent","chance","trait","hasOwnProperty","rndInteger"],"sources":["/Users/jeffereylam/repos/darwin-game/src/components/Game.js"],"sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\nimport traits from \"../data/traits.json\";\nimport survivalChance from \"../data/survivalChance.json\";\nimport MutationDisplay from \"./MutationDisplay\";\n\n// function Game() {\n//     const [page, setPage] = useState(0);\n//     const [gameData, setGameData] = useState({\n//         yearsLeft: 1000000,\n//         populationCount: 6,\n//     });\n\n//     const Page = [\n//         Logo,\n//         InitialMutation,\n//         SurvivalSimulation,\n//     ][currentPosition];\n\n//     return <div><Page goToNext={() => setPage(page + 1)} /></div>;\n// }\nclass Traits {\n    constructor(legs, size, neck, hair, camo) {\n        this.legs = legs;\n        this.size = size;\n        this.neck = neck;\n        this.hair = hair;\n        this.camo = camo;\n    }\n};\n\n// for populating screen with creatures\n// {population.map((creature, index) => <p key={index}>creature</p>)}\n\n// TO-DO: change this to user selection from MutationDisplay + double it\nlet population = [createRandomOffspring(), createRandomOffspring(), createRandomOffspring()];\nconst randomMutations = [createRandomOffspring(), createRandomOffspring(), createRandomOffspring(), createRandomOffspring(), createRandomOffspring(), createRandomOffspring(), createRandomOffspring(), createRandomOffspring(), createRandomOffspring()];\n\nfunction createRandomOffspring() {\n    return new Traits(\n        randomElement(traits.LEGS),\n        randomElement(traits.SIZE),\n        randomElement(traits.NECK),\n        randomElement(traits.HAIR),\n        randomElement(traits.CAMO)\n    );\n};\n\nfunction randomElement(array) {\n    return array[Math.floor(Math.random() * array.length)];\n};\n\nconst Game = () => {\n    const [popCount, setPopCount] = useState(3);\n    const [currentRound, setCurrentRound] = useState(1);\n    const [lifelines, setLifelines] = useState(2);\n    const [isOpen, setIsOpen] = useState(false);\n\n    const openDisplay = () => {\n        if (isOpen === false) {\n            setIsOpen(true)\n        } else {\n            setIsOpen(false);\n        }\n    }\n\n    const playGame = () => {\n        if (currentRound === 1) {\n            firstRound();\n            setCurrentRound(2);\n        }\n\n        if (currentRound === 2) {\n            reproductionRound();\n            survivalRound();\n            setCurrentRound(3);\n        }\n\n        if (currentRound === 3) {\n            reproductionRound();\n            survivalRound();\n            setCurrentRound(4);\n        }\n\n        if (currentRound === 4) {\n            reproductionRound();\n            survivalRound();\n            console.log(\"you win!\");\n        }\n\n    }\n\n\n    // Ensures larger starting population before catastrophes\n    function firstRound() {\n        for (let i = 0; i < 5; i++) {\n            reproductionRound();\n        }\n        survivalRound();\n        setPopCount(population.length);\n        console.log(population);\n\n        return population;\n    }\n\n    function reproductionRound() {\n        const reproductionRate = population.length / 2;\n        for (let i = 1; i <= reproductionRate; i++) {\n            population.push(singleOffspring(randomElement(population), randomElement(population)));\n        }\n        setPopCount(population.length);\n        console.log(population);\n\n        return population;\n    }\n\n    // defaults to lower index instead of 50/50\n    function singleOffspring(animal_1, animal_2) {\n        return new Traits(\n            traits.LEGS[Math.floor((traits.LEGS.indexOf(animal_1.legs) + traits.LEGS.indexOf(animal_2.legs)) / 2)],\n            traits.SIZE[Math.floor((traits.SIZE.indexOf(animal_1.size) + traits.SIZE.indexOf(animal_2.size)) / 2)],\n            traits.NECK[Math.floor((traits.NECK.indexOf(animal_1.neck) + traits.NECK.indexOf(animal_2.neck)) / 2)],\n            traits.HAIR[Math.floor((traits.HAIR.indexOf(animal_1.hair) + traits.HAIR.indexOf(animal_2.hair)) / 2)],\n            traits.CAMO[Math.floor((traits.CAMO.indexOf(animal_1.camo) + traits.CAMO.indexOf(animal_2.camo)) / 2)]\n        );\n    }\n    // should return population with changes\n    // references surivival test\n    function survivalRound() {\n        const CATASTROPHES = [\"COLD\", \"HOT\", \"PREDATORS\", \"TALL_PLANTS\", \"VIRUS\", \"VOLCANO\"]\n        const catastrophe = randomElement(CATASTROPHES);\n        console.log(catastrophe);\n        for (let i = 0; i < population.length; i++) {\n            if (survivalTest(population[i], survivalChance[catastrophe]) === false) {\n                population.splice(i, 1);\n            }\n        }\n        setPopCount(population.length);\n\n        return population\n    }\n\n    // bool on whether or not animal lives\n    // references survival chance\n    function survivalTest(animal, catastropheEvent) {\n        let chance = 0;\n\n        for (const trait in animal) {\n            if (catastropheEvent.hasOwnProperty(trait)) {\n                chance += catastropheEvent[trait][animal[trait]];\n            }\n        }\n\n        // random integer between 1 to 100\n        const rndInteger = Math.floor(Math.random() * 100) + 1;\n        if (chance >= rndInteger) {\n            return true\n        }\n        else {\n            return false\n        }\n    }\n\n    return (\n        <section>\n            <h1>Who Wants to Live a Million Years?</h1>\n            <h2>Current Population: {popCount}</h2>\n            <button onClick={firstRound}>First Round</button>\n            <button onClick={reproductionRound}>Reproduction Round</button>\n            <button onClick={survivalRound}>Survival Round</button>\n            <button onClick={playGame}>Play Game</button>\n            <div>\n                {openDisplay && <MutationDisplay genePool={randomMutations}></MutationDisplay>}\n            </div>\n        </section>\n    )\n}\n\nexport default Game;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}