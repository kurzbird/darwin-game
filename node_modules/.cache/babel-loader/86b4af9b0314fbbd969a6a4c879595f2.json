{"ast":null,"code":"var _jsxFileName = \"/Users/jeffereylam/repos/darwin-game/src/components/Game.js\";\nimport React from \"react\";\nimport Catastrophe from \"./Catastrophe\";\nimport Traits from \"./Traits\"; // function Game() {\n//     const [page, setPage] = useState(0);\n//     const [gameData, setGameData] = useState({\n//         yearsLeft: 1000000,\n//         populationCount: 6,\n//     });\n//     const Page = [\n//         Logo,\n//         InitialMutation,\n//         SurvivalSimulation,\n//     ][currentPosition];\n//     return <div><Page goToNext={() => setPage(page + 1)} /></div>;\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet population = [Traits.createRandomOffspring(), Traits.createRandomOffspring(), Traits.createRandomOffspring()]; // function firstRound() {\n//     for (i = 0; i < 5; i++) {\n//         reproductionRound();\n//     }\n//     survivalRound();\n//     console.log(population.length);\n//     return population;\n// }\n// function reproductionRound() {\n//     const reproductionRate = population.length / 2;\n//     for (let i = 1; i <= reproductionRate; i++) {\n//         population.push(singleOffspring(randomElement(population), randomElement(population)));\n//     }\n//     return population;\n// }\n// // defaults to lower index instead of 50/50\n// function singleOffspring(animal_1, animal_2) {\n//     return new Traits(\n//         LEGS[Math.floor((LEGS.indexOf(animal_1.legs) + LEGS.indexOf(animal_2.legs)) / 2)],\n//         SIZE[Math.floor((SIZE.indexOf(animal_1.size) + SIZE.indexOf(animal_2.size)) / 2)],\n//         NECK[Math.floor((NECK.indexOf(animal_1.neck) + NECK.indexOf(animal_2.neck)) / 2)],\n//         HAIR[Math.floor((HAIR.indexOf(animal_1.hair) + HAIR.indexOf(animal_2.hair)) / 2)],\n//         CAMO[Math.floor((CAMO.indexOf(animal_1.camo) + CAMO.indexOf(animal_2.camo)) / 2)]\n//     );\n// }\n// // should return population with changes\n// // references surivival test\n// function survivalRound() {\n//     const catastrophe = randomElement(CATASTROPHES);\n//     for (let i = 0; i < population.length; i++) {\n//         if (survivalTest(population[i], SURVIVAL_CHANCE[catastrophe]) == false) {\n//             population.splice(i, 1);\n//         }\n//     }\n//     return population\n// }\n// // bool on whether or not animal lives\n// // references survival chance\n// function survivalTest(animal, catastropheEvent) {\n//     let survivalChance = 0;\n//     for (const trait in animal) {\n//         if (catastropheEvent.hasOwnProperty(trait)) {\n//             survivalChance += catastropheEvent[trait][animal[trait]];\n//         }\n//     }\n//     // random integer between 1 to 100\n//     const rndInteger = Math.floor(Math.random() * 100) + 1;\n//     if (survivalChance >= rndInteger) {\n//         return true\n//     }\n//     else {\n//         return false\n//     }\n// }\n\nconst Game = () => {\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Current Population: \", population]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 12\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","Catastrophe","Traits","population","createRandomOffspring","Game"],"sources":["/Users/jeffereylam/repos/darwin-game/src/components/Game.js"],"sourcesContent":["import React from \"react\";\n\nimport Catastrophe from \"./Catastrophe\";\nimport Traits from \"./Traits\";\n\n// function Game() {\n//     const [page, setPage] = useState(0);\n//     const [gameData, setGameData] = useState({\n//         yearsLeft: 1000000,\n//         populationCount: 6,\n//     });\n\n//     const Page = [\n//         Logo,\n//         InitialMutation,\n//         SurvivalSimulation,\n//     ][currentPosition];\n\n//     return <div><Page goToNext={() => setPage(page + 1)} /></div>;\n// }\n\nlet population = [Traits.createRandomOffspring(), Traits.createRandomOffspring(), Traits.createRandomOffspring()];\n\n// function firstRound() {\n//     for (i = 0; i < 5; i++) {\n//         reproductionRound();\n//     }\n//     survivalRound();\n//     console.log(population.length);\n\n//     return population;\n// }\n\n// function reproductionRound() {\n//     const reproductionRate = population.length / 2;\n//     for (let i = 1; i <= reproductionRate; i++) {\n//         population.push(singleOffspring(randomElement(population), randomElement(population)));\n//     }\n//     return population;\n// }\n\n// // defaults to lower index instead of 50/50\n// function singleOffspring(animal_1, animal_2) {\n//     return new Traits(\n//         LEGS[Math.floor((LEGS.indexOf(animal_1.legs) + LEGS.indexOf(animal_2.legs)) / 2)],\n//         SIZE[Math.floor((SIZE.indexOf(animal_1.size) + SIZE.indexOf(animal_2.size)) / 2)],\n//         NECK[Math.floor((NECK.indexOf(animal_1.neck) + NECK.indexOf(animal_2.neck)) / 2)],\n//         HAIR[Math.floor((HAIR.indexOf(animal_1.hair) + HAIR.indexOf(animal_2.hair)) / 2)],\n//         CAMO[Math.floor((CAMO.indexOf(animal_1.camo) + CAMO.indexOf(animal_2.camo)) / 2)]\n//     );\n// }\n// // should return population with changes\n// // references surivival test\n// function survivalRound() {\n//     const catastrophe = randomElement(CATASTROPHES);\n//     for (let i = 0; i < population.length; i++) {\n//         if (survivalTest(population[i], SURVIVAL_CHANCE[catastrophe]) == false) {\n//             population.splice(i, 1);\n//         }\n//     }\n\n//     return population\n// }\n\n// // bool on whether or not animal lives\n// // references survival chance\n// function survivalTest(animal, catastropheEvent) {\n//     let survivalChance = 0;\n\n//     for (const trait in animal) {\n//         if (catastropheEvent.hasOwnProperty(trait)) {\n//             survivalChance += catastropheEvent[trait][animal[trait]];\n//         }\n//     }\n\n//     // random integer between 1 to 100\n//     const rndInteger = Math.floor(Math.random() * 100) + 1;\n//     if (survivalChance >= rndInteger) {\n//         return true\n//     }\n//     else {\n//         return false\n//     }\n// }\n\nconst Game = () => {\n    return (\n        <section>\n           <h1>Current Population: {population}</h1>\n        </section>\n    )\n}\n\nexport default Game;\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,MAAP,MAAmB,UAAnB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAEA,IAAIC,UAAU,GAAG,CAACD,MAAM,CAACE,qBAAP,EAAD,EAAiCF,MAAM,CAACE,qBAAP,EAAjC,EAAiEF,MAAM,CAACE,qBAAP,EAAjE,CAAjB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,IAAI,GAAG,MAAM;EACf,oBACI;IAAA,uBACG;MAAA,mCAAyBF,UAAzB;IAAA;MAAA;MAAA;MAAA;IAAA;EADH;IAAA;IAAA;IAAA;EAAA,QADJ;AAKH,CAND;;KAAME,I;AAQN,eAAeA,IAAf"},"metadata":{},"sourceType":"module"}