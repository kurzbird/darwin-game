{"ast":null,"code":"var _jsxFileName = \"/Users/jeffereylam/repos/darwin-game/src/components/Game.js\";\nimport React from \"react\";\nimport traits from \"../data/traits.json\"; // function Game() {\n//     const [page, setPage] = useState(0);\n//     const [gameData, setGameData] = useState({\n//         yearsLeft: 1000000,\n//         populationCount: 6,\n//     });\n//     const Page = [\n//         Logo,\n//         InitialMutation,\n//         SurvivalSimulation,\n//     ][currentPosition];\n//     return <div><Page goToNext={() => setPage(page + 1)} /></div>;\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Traits {\n  constructor(legs, size, neck, hair, camo) {\n    this.legs = legs;\n    this.size = size;\n    this.neck = neck;\n    this.hair = hair;\n    this.camo = camo;\n  }\n\n}\n\n;\n\nfunction createRandomOffspring() {\n  return new Traits(randomElement(traits.LEGS), randomElement(traits.SIZE), randomElement(traits.NECK), randomElement(traits.HAIR), randomElement(traits.CAMO));\n}\n\n;\n\nfunction randomElement(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\n;\nlet population = [createRandomOffspring(), createRandomOffspring(), createRandomOffspring()]; // function firstRound() {\n//     for (i = 0; i < 5; i++) {\n//         reproductionRound();\n//     }\n//     survivalRound();\n//     console.log(population.length);\n//     return population;\n// }\n// function reproductionRound() {\n//     const reproductionRate = population.length / 2;\n//     for (let i = 1; i <= reproductionRate; i++) {\n//         population.push(singleOffspring(randomElement(population), randomElement(population)));\n//     }\n//     return population;\n// }\n// // defaults to lower index instead of 50/50\n// function singleOffspring(animal_1, animal_2) {\n//     return new Traits(\n//         LEGS[Math.floor((LEGS.indexOf(animal_1.legs) + LEGS.indexOf(animal_2.legs)) / 2)],\n//         SIZE[Math.floor((SIZE.indexOf(animal_1.size) + SIZE.indexOf(animal_2.size)) / 2)],\n//         NECK[Math.floor((NECK.indexOf(animal_1.neck) + NECK.indexOf(animal_2.neck)) / 2)],\n//         HAIR[Math.floor((HAIR.indexOf(animal_1.hair) + HAIR.indexOf(animal_2.hair)) / 2)],\n//         CAMO[Math.floor((CAMO.indexOf(animal_1.camo) + CAMO.indexOf(animal_2.camo)) / 2)]\n//     );\n// }\n// // should return population with changes\n// // references surivival test\n// function survivalRound() {\n//     const catastrophe = randomElement(CATASTROPHES);\n//     for (let i = 0; i < population.length; i++) {\n//         if (survivalTest(population[i], SURVIVAL_CHANCE[catastrophe]) == false) {\n//             population.splice(i, 1);\n//         }\n//     }\n//     return population\n// }\n// // bool on whether or not animal lives\n// // references survival chance\n// function survivalTest(animal, catastropheEvent) {\n//     let survivalChance = 0;\n//     for (const trait in animal) {\n//         if (catastropheEvent.hasOwnProperty(trait)) {\n//             survivalChance += catastropheEvent[trait][animal[trait]];\n//         }\n//     }\n//     // random integer between 1 to 100\n//     const rndInteger = Math.floor(Math.random() * 100) + 1;\n//     if (survivalChance >= rndInteger) {\n//         return true\n//     }\n//     else {\n//         return false\n//     }\n// }\n\nconst Game = () => {\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Current Population: \", population.map((creature, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"creature\"\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 73\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 12\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","traits","Traits","constructor","legs","size","neck","hair","camo","createRandomOffspring","randomElement","LEGS","SIZE","NECK","HAIR","CAMO","array","Math","floor","random","length","population","Game","map","creature","index"],"sources":["/Users/jeffereylam/repos/darwin-game/src/components/Game.js"],"sourcesContent":["import React from \"react\";\nimport traits from \"../data/traits.json\"\n\n// function Game() {\n//     const [page, setPage] = useState(0);\n//     const [gameData, setGameData] = useState({\n//         yearsLeft: 1000000,\n//         populationCount: 6,\n//     });\n\n//     const Page = [\n//         Logo,\n//         InitialMutation,\n//         SurvivalSimulation,\n//     ][currentPosition];\n\n//     return <div><Page goToNext={() => setPage(page + 1)} /></div>;\n// }\nclass Traits {\n    constructor(legs, size, neck, hair, camo) {\n        this.legs = legs;\n        this.size = size;\n        this.neck = neck;\n        this.hair = hair;\n        this.camo = camo;\n    }\n};\n\nfunction createRandomOffspring() {\n    return new Traits(\n        randomElement(traits.LEGS),\n        randomElement(traits.SIZE),\n        randomElement(traits.NECK),\n        randomElement(traits.HAIR),\n        randomElement(traits.CAMO)\n    );\n};\n\nfunction randomElement(array) {\n    return array[Math.floor(Math.random() * array.length)];\n};\n\nlet population = [createRandomOffspring(), createRandomOffspring(), createRandomOffspring()];\n\n// function firstRound() {\n//     for (i = 0; i < 5; i++) {\n//         reproductionRound();\n//     }\n//     survivalRound();\n//     console.log(population.length);\n\n//     return population;\n// }\n\n// function reproductionRound() {\n//     const reproductionRate = population.length / 2;\n//     for (let i = 1; i <= reproductionRate; i++) {\n//         population.push(singleOffspring(randomElement(population), randomElement(population)));\n//     }\n//     return population;\n// }\n\n// // defaults to lower index instead of 50/50\n// function singleOffspring(animal_1, animal_2) {\n//     return new Traits(\n//         LEGS[Math.floor((LEGS.indexOf(animal_1.legs) + LEGS.indexOf(animal_2.legs)) / 2)],\n//         SIZE[Math.floor((SIZE.indexOf(animal_1.size) + SIZE.indexOf(animal_2.size)) / 2)],\n//         NECK[Math.floor((NECK.indexOf(animal_1.neck) + NECK.indexOf(animal_2.neck)) / 2)],\n//         HAIR[Math.floor((HAIR.indexOf(animal_1.hair) + HAIR.indexOf(animal_2.hair)) / 2)],\n//         CAMO[Math.floor((CAMO.indexOf(animal_1.camo) + CAMO.indexOf(animal_2.camo)) / 2)]\n//     );\n// }\n// // should return population with changes\n// // references surivival test\n// function survivalRound() {\n//     const catastrophe = randomElement(CATASTROPHES);\n//     for (let i = 0; i < population.length; i++) {\n//         if (survivalTest(population[i], SURVIVAL_CHANCE[catastrophe]) == false) {\n//             population.splice(i, 1);\n//         }\n//     }\n\n//     return population\n// }\n\n// // bool on whether or not animal lives\n// // references survival chance\n// function survivalTest(animal, catastropheEvent) {\n//     let survivalChance = 0;\n\n//     for (const trait in animal) {\n//         if (catastropheEvent.hasOwnProperty(trait)) {\n//             survivalChance += catastropheEvent[trait][animal[trait]];\n//         }\n//     }\n\n//     // random integer between 1 to 100\n//     const rndInteger = Math.floor(Math.random() * 100) + 1;\n//     if (survivalChance >= rndInteger) {\n//         return true\n//     }\n//     else {\n//         return false\n//     }\n// }\n\nconst Game = () => {\n    return (\n        <section>\n           <h1>Current Population: {population.map((creature, index) => <p key={index}>creature</p>)}</h1>\n        </section>\n    )\n}\n\nexport default Game;\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,qBAAnB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;AACA,MAAMC,MAAN,CAAa;EACTC,WAAW,CAACC,IAAD,EAAOC,IAAP,EAAaC,IAAb,EAAmBC,IAAnB,EAAyBC,IAAzB,EAA+B;IACtC,KAAKJ,IAAL,GAAYA,IAAZ;IACA,KAAKC,IAAL,GAAYA,IAAZ;IACA,KAAKC,IAAL,GAAYA,IAAZ;IACA,KAAKC,IAAL,GAAYA,IAAZ;IACA,KAAKC,IAAL,GAAYA,IAAZ;EACH;;AAPQ;;AAQZ;;AAED,SAASC,qBAAT,GAAiC;EAC7B,OAAO,IAAIP,MAAJ,CACHQ,aAAa,CAACT,MAAM,CAACU,IAAR,CADV,EAEHD,aAAa,CAACT,MAAM,CAACW,IAAR,CAFV,EAGHF,aAAa,CAACT,MAAM,CAACY,IAAR,CAHV,EAIHH,aAAa,CAACT,MAAM,CAACa,IAAR,CAJV,EAKHJ,aAAa,CAACT,MAAM,CAACc,IAAR,CALV,CAAP;AAOH;;AAAA;;AAED,SAASL,aAAT,CAAuBM,KAAvB,EAA8B;EAC1B,OAAOA,KAAK,CAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBH,KAAK,CAACI,MAAjC,CAAD,CAAZ;AACH;;AAAA;AAED,IAAIC,UAAU,GAAG,CAACZ,qBAAqB,EAAtB,EAA0BA,qBAAqB,EAA/C,EAAmDA,qBAAqB,EAAxE,CAAjB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMa,IAAI,GAAG,MAAM;EACf,oBACI;IAAA,uBACG;MAAA,mCAAyBD,UAAU,CAACE,GAAX,CAAe,CAACC,QAAD,EAAWC,KAAX,kBAAqB;QAAA;MAAA,GAAQA,KAAR;QAAA;QAAA;QAAA;MAAA,QAApC,CAAzB;IAAA;MAAA;MAAA;MAAA;IAAA;EADH;IAAA;IAAA;IAAA;EAAA,QADJ;AAKH,CAND;;KAAMH,I;AAQN,eAAeA,IAAf"},"metadata":{},"sourceType":"module"}